// Code generated by go-bindata.
// sources:
// assets/loginterface.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsLoginterfaceHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x6d\x6f\xdb\x38\x12\xfe\x9e\x5f\x31\x65\x8b\xb3\xdd\x46\x52\x93\x6c\x2f\x6d\x22\xe5\xb0\x9b\xb6\x17\x77\x7b\xdd\x6e\x93\x43\xef\xb0\x58\x1c\x68\x72\x24\x31\xa1\x48\x85\xa4\xec\x18\x41\xfe\xfb\x81\x7a\xb3\xe4\x26\x6d\x77\x0f\x38\x14\x85\x4d\x7a\x38\x6f\xcf\xc3\x99\x61\xe2\x47\xaf\x7f\x39\xbd\xf8\xf7\xc7\x37\x90\xbb\x42\x9e\xec\xc4\xfe\x03\x24\x55\x59\x42\x50\x91\x93\x1d\x80\x38\x47\xca\xfd\x17\x80\xb8\x40\x47\x81\xe5\xd4\x58\x74\x09\xa9\x5c\x1a\xbc\x24\xc3\x9f\x72\xe7\xca\x00\xaf\x2b\xb1\x4c\xc8\xbf\x82\x7f\xfe\x18\x9c\xea\xa2\xa4\x4e\x2c\x24\x12\x60\x5a\x39\x54\x2e\x21\xf3\x37\x09\xf2\x0c\x47\x27\x15\x2d\x30\x21\x4b\x81\xab\x52\x1b\x37\x10\x5e\x09\xee\xf2\x84\xe3\x52\x30\x0c\xea\xc5\x2e\x08\x25\x9c\xa0\x32\xb0\x8c\x4a\x4c\xf6\x3a\x45\x8f\x82\x00\x2e\x72\x04\xba\xd0\x4b\x84\x03\xa8\x15\x3b\x9a\x59\x78\x5a\x54\xd6\x3d\x05\xa6\x0b\x84\x54\x18\xeb\x40\x28\x70\x39\x82\x8f\xed\x18\xa8\x5a\x83\x76\x39\x9a\x7a\xdd\xd9\x06\x7f\xa8\x39\xf3\x94\xa6\x0e\xcd\x53\x7f\xc4\x62\xa3\x32\x08\x5a\xab\x4e\x38\x89\x27\x3f\x55\x42\x72\x90\x3a\xb3\x90\x6a\x03\xef\xf4\x02\x6e\x6f\x21\x7c\xaf\xb3\xf9\x6b\xb8\xbb\x8b\xa3\x46\x6c\x67\xe3\xe9\x4f\x5a\x3b\xeb\x0c\x2d\x37\xaa\xa4\x50\x57\x90\x1b\x4c\x13\x12\x45\x8c\xab\x4b\x1b\x32\xa9\x2b\x9e\x4a\x6a\x30\x64\xba\x88\xe8\x25\xbd\x89\xa4\x58\xd8\xc8\xad\x84\x73\x68\x82\x45\xa7\x26\x3a\x08\x0f\xc2\xc3\x88\x59\x1b\xf5\x7b\x61\x21\x54\xc8\xac\x25\x60\x50\x26\xc4\xba\xb5\x44\x9b\x23\x3a\xd2\x79\x32\x30\xe9\xc1\xb3\x47\x51\x94\x6a\xe5\x6c\x98\x69\x9d\x49\xa4\xa5\xb0\xb5\x61\x66\xed\xdf\x52\x5a\x08\xb9\x4e\xce\x75\x65\x18\x3e\x3b\xd5\x1c\x9f\x7d\x34\xfa\x61\xdd\xf5\x56\x13\x1a\xc0\x42\xf3\x35\xdc\x42\x49\x39\x17\x2a\x0b\x9c\x2e\x8f\xe0\xf0\x79\x79\x73\x0c\x77\xad\x84\x96\x70\x0b\xed\x77\x80\x05\x65\x57\x99\xd1\x95\xe2\x01\xd3\x52\x9b\x23\x78\x9c\xbe\xf2\xff\x8e\x7b\x11\xef\x68\xd0\x38\x75\x04\x93\xc6\x2d\xf0\x6e\xc1\x47\xa3\x27\xbb\x50\x68\xa5\x6d\x49\x19\x76\x47\x3a\x4b\x52\x84\xd6\x71\x34\x06\x6c\x49\x15\xdc\xf6\x1a\x7b\x4b\xcf\x9f\x6f\xcc\xac\x72\xe1\x30\xa8\x15\x1d\x41\x69\x30\x58\x19\x5a\x8e\x55\xc6\x51\x1b\xeb\x06\xde\xb3\x8b\x7f\xbc\x7f\x01\x36\x17\x05\x50\xc5\xe1\x13\xda\x52\x2b\x1e\x5e\x36\xfc\x98\xbf\x79\x09\xb6\x2a\x3d\xd7\x41\xa7\xad\x30\x4a\x2c\x50\x39\x5b\x1f\x28\x90\x0b\x0a\xd7\x15\x1a\x81\x03\xb6\x79\xd5\x9f\x7f\xfc\xf4\x61\xfe\xe1\xef\x47\x43\xa5\x5c\xa3\x55\x13\x07\x2b\x6d\xae\x40\xa4\xb0\xd6\x15\xf8\xdb\x54\xb3\xbc\xa4\x19\xc2\x52\x50\x48\x85\xc4\xa3\x28\x1a\xa9\xfb\x4d\xa4\x20\x1d\xcc\xdf\xc0\xab\xdf\x3b\xb0\x62\xcb\x8c\x28\x1d\x58\xc3\x36\xbc\xd0\xd6\x86\x05\xbd\x61\x5c\xd5\x8c\xf0\x95\xe2\x85\xcd\xc5\x32\x3a\x08\x0f\xc3\xfd\xcd\xba\x26\xdd\xa5\x25\x27\x71\xd4\xa8\xf9\x23\x5a\x4d\x13\x52\xb4\x17\xfe\x10\xee\x77\xab\x07\x34\xc6\x8f\x7e\x43\xc5\x45\xfa\x7b\x13\x4e\x1c\x75\x95\x2a\xf6\x64\x6b\x65\x14\x5d\x02\x93\xd4\xda\x84\x28\xba\x5c\x50\x03\xcd\x47\xc0\x31\xa5\x95\x74\xdd\x32\x15\x37\xc8\x3d\x2d\x49\xef\x2e\x17\xfd\x51\x5f\x12\xa8\x50\x68\x82\x54\x56\x82\xf7\x32\xdd\x5d\x36\x1e\x32\xff\xdf\xe9\x2c\x93\x08\x19\x3a\xf0\xec\x2d\x91\xd7\x78\x2f\xd0\x5f\x56\x28\xf4\x42\x48\x04\x2e\x6c\x29\xe9\xba\x87\x61\xdb\x5a\xeb\x92\x0f\x07\xcd\xc0\x96\x8f\xac\x72\x4e\x2b\x70\xeb\x12\x13\xd2\x2c\xc8\xd6\xb1\xd6\x05\xa6\xa5\xa4\xa5\x45\x4e\x80\x53\x47\xdb\x6d\x1f\x4a\xb3\xdf\x6d\x53\x93\xf9\x62\xfe\x78\x61\x03\xbc\xa1\x45\x29\x31\x68\x15\x75\x92\xc1\x1e\x01\x6a\x04\x0d\xf0\xa6\xa4\x8a\x23\x4f\x48\x4a\xa5\xc5\x91\x67\x1e\x5e\x7f\x99\x5a\x5f\xac\x09\xb4\x92\x6b\x72\x72\xd1\x78\xa3\xe8\x52\x64\xd4\x09\xad\xe2\xc8\xcb\x7d\xe5\xa8\x60\x5a\x05\x0b\x6a\x6a\xb8\xff\x2f\xa2\x71\xd4\x64\x72\xb4\x47\xb7\xd2\xba\xf0\x18\x93\xb6\x56\x3e\x26\x27\x9f\xb0\xd4\xc1\xa7\x4a\x29\x34\x71\x44\x07\x40\x46\x5c\x2c\xdb\x4a\xd0\x13\xe4\x54\x4b\x89\xcc\xd5\xb7\xd1\x33\xd2\x97\x5d\xbb\xeb\xa9\x51\xd8\xdd\x9a\x38\x4d\xff\xe9\x5a\x8f\xe7\x4c\x0d\x98\x50\xd9\x83\x34\xe9\xf0\x81\x2d\xbc\x08\x08\x9e\x90\xaf\xe2\x39\x8a\xb4\x92\x83\x50\x3b\x65\x8a\x2e\xb7\xf1\x95\x62\xbc\x01\x10\x97\xdb\xdc\xc3\x1b\x47\xb6\xa5\x00\x9a\xee\xe8\x83\x32\x58\x6a\x2b\x9c\x36\x6b\x9f\xe1\x2e\x99\x5b\x5a\x7c\x76\x9a\x20\xbc\x78\xb3\x3c\xf1\x49\x86\xbf\x14\x82\x73\xed\x8e\xbf\xb0\x70\xee\xa8\xab\xec\x51\x8b\x79\x1d\xbf\xb7\x19\xd8\x7a\x9f\x9c\xac\xa8\x70\x42\x65\x61\x18\xde\xc7\x14\x8f\x5a\xb9\x15\x6d\x34\x0e\x37\x8e\x2a\xb9\x0d\x72\x0d\x6d\x14\x6e\xa5\x77\x80\xd7\x48\x6c\xab\x86\x6c\x8a\x70\xa4\x68\x47\x98\x7b\x6b\xce\xbd\x15\xc9\xe8\x15\x79\x90\x16\x41\xc1\x83\xbd\xfd\x31\xca\x5a\xd6\x69\xf1\x23\x8a\x4f\xa6\xfe\x22\x9a\x9d\x2f\x16\x43\x2a\xd7\x41\x5c\xfe\x5a\xa1\x59\xc3\x54\x21\x43\x6b\xa9\x59\xd7\x98\xf6\x93\xcc\xc4\xc2\x3b\xba\xa4\xe7\x4d\x99\x2f\x65\x95\x09\x65\x67\x9b\x40\x87\xf5\xff\x9b\x03\xce\xa5\xef\x7d\xeb\x68\x2f\xdc\xdb\x0f\x7f\x68\x57\x0f\x36\x82\x20\x80\xb9\x62\xb2\xe2\x08\x54\x4a\x3f\xb4\x95\x42\x22\xef\x7c\x80\xe9\x02\xa5\x5e\xcd\x76\x41\x1b\x10\xad\xa0\x50\x5c\x2c\x05\xaf\xa8\xac\xfb\xa2\x05\x6a\x41\x21\x72\xe4\x7f\xd2\xe3\x87\x46\xb2\xcb\xed\x89\x6c\x1c\xc1\x97\x96\xba\xde\xf8\x5d\x19\x0a\x2c\x33\x5a\xca\x0b\x1d\xed\x87\x7b\xe1\x7e\x97\xa9\x6e\xb7\x33\x38\x22\xb7\x50\x0e\x33\x23\xdc\x3a\x21\x36\xa7\xfb\x2f\xfe\x1a\x1c\xfe\x7a\xbe\xc7\xce\xec\xd9\xe1\x8b\xfc\x60\xfe\x36\x33\x6f\x7f\xb6\x3c\x2f\x7e\x3e\x3b\x2b\x3f\x5f\xbf\x7d\xb9\x6f\x17\xd1\xab\xe5\x87\xf7\xd7\xec\xda\x3e\x4f\x08\x30\xa3\xad\xd5\x46\x64\x42\x25\x84\x2a\xad\xd6\x85\xae\x1e\x0c\xaa\x63\xd6\x92\x1a\x3f\x21\xcf\x5f\x43\x02\x64\x38\x1d\x93\xe3\x9d\x81\x08\x2a\x5e\x6a\xa1\xfa\x4b\xde\xad\x21\x81\x69\x5a\x29\xe6\x9b\xc8\x74\x36\x98\xda\xec\x4a\x38\x96\xc3\x54\x6a\x56\x77\x98\xb0\x34\xda\x69\xa6\xe5\x50\x08\x80\x51\x8b\xd0\xe6\x96\x1c\x8d\xf2\x61\xd0\x55\x46\x01\x59\x59\x9f\x76\x02\xcf\xa0\xd7\x95\x6b\xeb\xe0\x19\x90\x48\xea\x2c\xb2\xce\x20\x2d\x5a\x81\x6c\xfe\x7a\x58\x87\xda\x79\xe2\x21\xc5\x7f\x52\x6f\x37\xb2\xde\xcd\xa6\xb3\x6e\xd7\x6a\x76\x05\x09\x28\x5c\xc1\x67\x5c\x9c\x6b\x76\x85\x6e\xda\x65\x69\x24\x15\x6a\x55\xf8\x8b\x9a\x21\x24\xd0\xe7\x0e\x97\x6e\xb6\x49\x8c\x4f\xb9\x9f\x04\x20\x81\x77\xe7\xbf\x7c\x08\x4b\xff\xba\xf3\x32\xa1\xdf\x9d\x6d\x5c\x11\x29\x4c\xfd\x56\xc8\x72\xaa\x14\x4a\x48\x92\x04\x88\x7f\x64\x91\x71\xa2\x1b\x3c\x1a\x59\x3f\xa8\x8c\x7f\xed\x80\xf0\x07\xff\x53\xd7\xf7\xca\xc8\x2d\x3c\x00\x9e\x4c\x27\x8f\xfb\xe2\x3f\x99\x85\xd4\x39\x33\x9d\xf8\x7e\x31\xd9\xad\xdd\x0d\xdb\xc0\x66\xdb\xbd\x60\x61\x90\x5e\x1d\x7f\xd5\xa0\x7f\x6c\x7e\xd3\xa2\x6f\x65\xd3\xff\xc1\x92\x75\xd4\xb8\x7b\xad\x0c\x3b\x53\x67\x68\x62\x2a\xa5\x9a\x06\x35\xf9\x83\x86\x52\xa1\x84\xcd\x91\x7f\xbf\xad\xee\xc4\xf7\x98\xba\x1b\x7c\x6f\xd8\x3c\x24\xe7\x88\x45\x52\x28\xcf\xb3\x27\xd3\x89\x1f\x15\xea\x4e\xdc\x0d\x5b\x75\x37\x1d\x5a\x7b\x32\xf5\xd2\xb3\x30\x15\x8a\x4f\x27\x5e\xe6\x1b\x29\xef\x0e\x50\xce\x4f\x7d\x9f\x1b\x51\xf1\x3e\xb9\xb2\x44\xc5\x2f\xf4\xd4\x67\xc1\x37\xbd\xc9\x6c\x28\xd5\xd7\xc7\x46\xbc\x7f\xce\x1d\x77\xef\xb9\xbe\x72\xc5\x51\xf3\x9a\x88\xa3\xe6\x4f\x24\xff\x0d\x00\x00\xff\xff\xab\x3d\x93\xf3\x33\x11\x00\x00")

func assetsLoginterfaceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsLoginterfaceHtml,
		"assets/loginterface.html",
	)
}

func assetsLoginterfaceHtml() (*asset, error) {
	bytes, err := assetsLoginterfaceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/loginterface.html", size: 4403, mode: os.FileMode(436), modTime: time.Unix(1487981825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/loginterface.html": assetsLoginterfaceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"loginterface.html": &bintree{assetsLoginterfaceHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

