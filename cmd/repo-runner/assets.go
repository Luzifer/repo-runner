// Code generated by go-bindata.
// sources:
// assets/.loginterface.html.swp
// assets/loginterface.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsLoginterfaceHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x4d\x8c\x1c\x47\x15\xfe\x82\xf0\xee\xce\xee\xcc\x2e\x21\x07\x0e\x48\xf0\xdc\xb6\x34\x33\xb6\xa7\x7b\x77\xed\xc8\xce\x7a\x7a\x90\xe3\x58\xb0\x96\x63\x9b\xd8\x8e\x83\xa2\x1c\x6a\xba\x6b\x66\x6a\xb7\xba\xaa\x53\x55\x33\xe3\xc5\x2c\x88\x33\x12\x70\x42\x1c\x10\x47\x14\x84\xc2\x81\x03\x02\x05\x09\x89\x03\x67\x7e\x04\x97\x1c\x72\x42\xb9\x82\xb8\x23\x54\xd3\x33\xb3\xb3\x8e\x71\xa2\x58\x22\x42\xf4\xb7\xda\xed\x7a\xdd\xef\x7d\xf5\xaa\xde\xab\xaf\x77\xb5\xd3\xdd\x7c\x75\xf7\x65\xba\x18\x5e\x00\x80\xcf\x00\x3f\x79\xfb\xfd\xfb\xd5\x3f\x57\xab\x3f\xbb\x07\xc8\xe1\xd7\x45\x8f\x1b\x7c\x18\xc6\xda\xec\xfb\xef\xcd\xad\x27\xfb\x7d\x73\x4a\x18\x79\x67\x9b\xb3\x84\xdb\x28\x37\x62\xc4\x1c\x8f\xfa\x3a\xb2\x26\x89\xfa\xc2\x0d\x86\xdd\x30\xd1\x59\x74\x63\xea\x6c\x78\xae\x5b\x66\xa8\x14\x37\x51\x92\xa5\xc7\x6c\x66\x2d\x77\x36\x92\xba\x2f\x94\xe3\xa6\xc7\x12\x1e\x0e\x5c\x26\x3f\x34\xe5\x12\x25\xfe\x0f\x51\xc3\xf9\xed\xad\x4d\x3f\x3a\x15\x9c\xa4\xe7\x3e\x7b\xef\x93\x4e\xa8\x44\x89\x12\x25\x4a\x94\x28\x51\xa2\x44\x89\x12\xff\x45\xb8\xfc\x19\x7c\x0b\xc0\xa7\xa6\xf6\xee\xf4\xfa\xcc\x23\xd7\x12\x25\x4a\x94\x28\x51\xa2\x44\x89\x12\x25\x4a\x94\x28\x51\xa2\xc4\xff\x2e\x58\x0a\xbc\x7a\x02\xf8\xc1\x52\xf1\xff\xff\xd9\xdf\xff\x7f\xdf\x00\xde\xdb\x00\xfe\xba\x01\xbc\xb3\x01\x7c\x7b\x03\xb8\xb4\x01\xfc\x6e\x1d\xf8\xde\x3a\xf0\xdd\x75\x60\xbc\x0e\x9c\x58\x07\x3e\xbd\x0e\xfc\xb4\x06\xbc\x55\x03\x7e\x54\x03\xbe\x5f\x03\xb2\x1a\xb0\x53\x03\xb6\x6b\xc0\xe7\x6b\xc0\x52\x0d\x78\xbf\x0a\xbc\x57\x05\xfe\x54\x05\xfe\x58\x05\x46\x55\xa0\x5e\x05\x9e\xad\x02\xef\xac\x01\x62\x0d\x78\x6d\x0d\xb8\xb9\x06\x5c\x5b\x03\xce\xae\x01\xcf\xad\x01\xff\x5c\x05\xfe\xb2\x0a\xfc\x7e\x15\xf8\xf5\x2a\xf0\xf3\x55\xe0\xed\x55\x60\x6f\x15\x78\x76\x15\xf8\x55\x05\xb8\x55\x01\x6e\x56\x80\x2b\x15\xe0\x8b\x15\xe0\x0b\x15\xa0\x56\x01\xfe\xb1\x02\xfc\x61\x05\xf8\xcd\x0a\xf0\x8d\x15\x40\xad\x00\x9b\x2b\xc0\x99\x15\xe0\xe4\x0a\xf0\xaf\x65\xe0\xdd\x65\xe0\x17\xcb\xc0\x77\x96\x81\x83\x65\x40\x2f\x03\x6a\x19\xe8\x2c\x03\xb5\x65\xe0\x6f\x4b\xc0\x6f\x97\x80\x5f\x2e\x01\x6f\x2d\x01\x3f\x5e\x2a\xf6\xeb\x87\x4b\xc0\xdd\x25\xe0\x73\x4b\xc0\xbb\x27\x3e\xe1\x42\x96\x28\x51\xa2\xc4\x11\xda\xd1\xc0\x65\xb2\x03\xa2\x76\xd4\xd5\xe9\x81\x1f\xf9\xb1\x4d\x8c\xc8\x5d\x61\x11\x1d\x5e\x9e\x0e\x88\x4e\x37\xa4\x50\xbc\x19\xb2\x3c\x7f\x9a\x58\xfe\x54\xc1\x2a\x6d\x47\xed\xa7\x64\xb8\xab\x1b\xa7\x1b\xf5\x53\x52\xf7\x6d\xbd\xd9\x7c\x8c\x57\x9a\x5e\x95\xcc\xda\x46\xca\x1c\x0b\x93\x01\x53\x8a\xcb\xc7\xf8\xf5\x84\x4a\x1b\x75\x9b\x33\x55\x6f\x86\x8e\x3f\x70\x45\x40\xc6\xad\x65\x7d\xbe\x10\x30\x62\x86\x7c\x08\xc5\x74\xba\x51\x6f\x4b\xd1\x69\xfb\xa8\x4e\x3b\x9a\x5e\xa4\xe8\xd4\x9b\x97\x31\x0f\x38\x9c\x8f\x88\x0c\x77\x43\xa3\x8e\xc8\x44\x8f\x8e\x25\x46\x71\x1c\x53\x90\x71\xc7\x82\x26\x3d\x3c\x36\xa7\x77\xa3\x98\xae\xdf\xb9\x75\x33\xcc\x99\xb1\xbc\xc1\x47\x2e\xf4\x77\x9b\x97\x51\xa9\x54\xac\x4e\xf6\x43\xad\xa6\x09\x53\x4c\xbd\xa1\x4a\x9c\xd0\xca\xfb\x35\x1f\xce\x5c\x28\x26\xc5\xc7\x74\x9f\x77\xef\xe8\x64\x9f\xbb\x06\x57\x69\xae\x85\x72\x05\xcb\x61\xb3\x51\x0c\x2a\x87\x93\x9f\x95\x4a\x91\x32\x05\x63\xbb\x13\x45\x01\x9d\x25\xa9\x13\xe6\x79\xc3\x81\xb6\x8e\xce\x52\x10\x49\xdd\x8f\xac\x33\x9c\x65\xc5\xf3\xfe\xee\x4b\x05\x47\x25\xe5\x3d\x36\x94\x6e\xe7\x03\x5c\x1f\x85\x2c\x7a\x94\x2d\x61\x96\x53\x30\x70\x2e\xb7\x3b\x41\xc1\x69\xc7\xc2\x25\x03\x6a\xcc\x79\x72\xa3\x9d\x4e\xb4\xf4\xdb\x57\xa9\x54\x66\xab\xa3\x98\x1a\xf3\x0d\x99\x3e\xf3\xbb\x3a\x7b\x3e\xaf\xd7\xa4\xbc\x7e\x4e\x8a\x29\x78\xf8\x90\xc2\x1b\x13\xe3\xf0\x30\x28\xaa\xd6\x9e\xf5\xe5\xa2\x45\xd6\x24\x71\x10\x45\x49\xaa\xf6\x6c\x98\x48\x3d\x4c\x7b\x92\x19\x3e\xf9\x70\x23\xdb\x63\x0f\x22\x29\xba\x36\x72\x63\xe1\x1c\x37\xad\xae\xd6\xce\x3a\xc3\xf2\xe8\x7c\x78\x3e\xbc\x18\xed\xd9\x68\x7e\x2b\xcc\x84\x0a\xf7\x6c\xd0\x39\x7e\x02\xda\x27\x5b\x2d\xda\x55\x89\x1c\xa6\x9c\x98\x94\x94\xe8\x2c\x17\x92\xa7\x94\xcb\x61\x5f\x28\x4b\x8d\x2e\x97\x7a\xdc\x3c\x47\xda\x90\x98\x3a\x0a\x95\x8a\x91\x48\x87\x4c\x52\x4f\x48\x6e\x89\x59\x52\x9c\xa7\x3c\xa5\x56\xab\xf3\x31\x56\xb0\xf7\xe6\x90\x9b\x83\x68\x2b\xdc\xda\x0e\x2f\x4c\xad\x27\x65\xbc\xf7\x55\xef\x41\x0d\xc5\x13\xdf\x97\xe6\x80\x7a\xda\xd0\x8b\xb3\xc5\xd6\x2d\x5d\x67\x23\x76\xa7\x48\x61\xba\x92\xe6\x24\xb7\xa9\x0a\xa4\x62\x34\x93\x80\x63\xc6\x07\x4c\xa2\xb6\x96\x24\xd2\x38\xf0\x52\xe0\x93\xd1\x72\xc1\x39\x15\x23\x4a\xbc\x0e\xc4\x41\xa2\x65\x2b\x4b\x5b\x5b\xdb\xc1\x9c\x79\xe1\xa9\xd1\xe3\xa0\x83\x4a\xe5\x78\x84\x72\x4c\x28\x6e\x26\x11\xed\x99\x4a\xb5\xa3\x01\x67\xe9\x6c\xb5\xaf\x73\x95\x8a\xde\x1b\xb3\x7d\x7d\x64\x67\x8b\xa6\x8d\x22\x6d\x6d\x98\xb1\x07\x49\xaa\x26\x3b\x6b\xb8\xcd\xb5\x4a\xa3\xad\xf0\x42\xb8\x3d\xb3\xfe\xc3\x86\x7e\x34\x46\x2f\xa6\xcf\xdb\x81\x18\x45\xe7\xc3\x8b\xe1\xf6\x91\xfd\x84\x32\xbd\x2e\x7a\x24\x1d\xed\x5e\xa3\x17\xde\x58\x28\xde\xfd\x2b\xaf\xdc\xdc\xbd\xf9\xe5\x1d\x7a\x65\x9a\xd7\x9e\xa5\x54\x73\xab\xea\x8e\xc6\xda\xec\x7b\xf5\x3a\xd0\x43\x1a\x09\x3e\x26\x37\xe0\x94\x7b\xe1\x19\x09\x36\x69\xb6\x9d\x28\x3a\x6a\x32\x4f\xf7\x95\xbb\x2f\xdf\x78\x9e\xec\x40\x64\xc4\x54\xba\x48\xea\x7b\x62\xf7\xda\x25\xb2\xc3\x3c\xd7\xc6\x91\xee\x4d\x9d\xb9\xe4\x19\x57\xce\x4e\x02\x32\x9e\x0a\x46\xbe\xe5\x04\xb7\x8b\x3d\x62\xdd\x81\xe4\xf3\x17\xc5\xbc\xe6\xe3\x81\x70\xbc\x35\xf9\xec\xf1\x0e\xe5\x86\xb7\xc6\x86\xe5\x47\xd2\x9b\x68\xa9\xcd\x0e\x9d\xea\x6d\x6e\xce\x6e\x4a\x11\x5a\x97\x72\x63\xc8\x4b\xf9\x5c\x7f\x8f\x28\x7b\x5a\xb9\x56\x8f\x65\x42\x1e\xec\x50\xfd\x8e\x1e\x9a\x84\xd3\x55\x9d\x72\xba\x6d\x74\xfd\x1c\x65\x5a\xe9\xc9\x84\x47\xd3\x74\x59\xb2\xdf\x37\x7a\xa8\xd2\xd6\x7c\xc6\x17\xfc\xd7\xcc\x45\x4b\x7a\x48\xd3\xa3\x58\x2c\xa4\x30\xa4\x50\xfb\x34\x30\xbc\x77\x54\x6a\x3f\xbd\x0d\xfb\x5a\xf7\x25\x67\xb9\xb0\x93\x82\x27\xd6\x7e\xa9\x48\x29\x2e\x12\x3a\xeb\x13\x3a\x7b\xdb\xe8\x80\x0c\x97\x71\x30\x61\xb5\x03\xce\x5d\xf0\x18\xee\x8f\x2d\x5a\x89\x7d\x54\xb5\x12\x6b\x1f\x37\xe5\xbc\x01\xe6\xc7\x7e\xa1\x78\x4e\x38\xc9\x3b\x2f\x0e\x85\x4c\xbd\xec\x16\xbd\x70\x5d\x77\x69\x51\x7a\xdb\x51\xe1\x76\x44\x75\x77\xc0\x89\x75\xf5\x88\xd3\x79\xf2\x6f\x4b\x72\xac\x6f\xe9\x4c\x36\xb4\xee\x8c\x97\x46\x4e\x3d\x61\xac\x23\xa1\x26\x8d\xe9\xcf\xe9\x65\x62\xea\x80\xb4\x1b\x70\x33\xb1\xc9\x9f\x6a\xae\x1c\xf9\xa0\x22\xe6\x0c\xeb\x39\x6e\xce\xf8\x10\xcb\x0b\xca\x79\x07\x4f\x66\x51\x2c\xe3\x71\xe0\xfb\xdd\xf7\x69\x30\xa3\x88\x83\xb1\x48\xdd\x20\x4e\xf9\x48\x24\xbc\x35\x31\xce\x91\x50\xc2\x09\x26\x5b\x36\x61\x92\xc7\x5b\xc1\x22\x91\xaf\x68\x8b\xbf\x39\x14\xa3\x38\x78\xad\x75\xef\x4a\xeb\xaa\xce\x72\xe6\x44\x57\xf2\x05\xd6\xdd\x6b\x31\x4f\xfb\xfc\x58\x64\x32\xf0\xef\x7e\x17\x07\x43\xd7\x6b\x5d\x2a\x04\xa9\x90\xa1\xb6\x3f\xea\x24\x99\xea\xc7\x01\x57\x41\x07\xed\x93\x2f\xdd\xba\x7a\xf7\x6b\xb7\xaf\x51\xf1\x1b\xd6\xbf\x03\x00\x00\xff\xff\x21\x17\x9a\xcd\x00\x30\x00\x00")

func assetsLoginterfaceHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_assetsLoginterfaceHtmlSwp,
		"assets/.loginterface.html.swp",
	)
}

func assetsLoginterfaceHtmlSwp() (*asset, error) {
	bytes, err := assetsLoginterfaceHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.loginterface.html.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1474801379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsLoginterfaceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x6d\x6f\xd3\x48\x10\xfe\x9c\xfc\x8a\xc1\x20\x25\x69\xb1\x4d\x5b\x10\x90\xda\x39\x41\x5b\xdd\x05\x71\xc0\xd1\x9e\xb8\x13\xe2\xc3\x66\x77\x1c\x6f\xba\xde\x31\xbb\xeb\x84\xa8\xca\x7f\x3f\x6d\x1c\xc7\x0e\x47\x75\x2f\xaa\x54\x7b\xde\x9e\x99\xd9\x99\x7d\xe2\xe4\xc1\xe5\xfb\x8b\x9b\x3f\x3f\x5c\x41\xee\x0a\x35\xe9\x27\xfe\x01\x8a\xe9\x79\x1a\xa0\x0e\x26\x7d\x80\x24\x47\x26\xfc\x0b\x40\x52\xa0\x63\xc0\x73\x66\x2c\xba\x34\xa8\x5c\x16\xbe\x08\xba\xa6\xdc\xb9\x32\xc4\xaf\x95\x5c\xa6\xc1\x1f\xe1\xef\xaf\xc2\x0b\x2a\x4a\xe6\xe4\x4c\x61\x00\x9c\xb4\x43\xed\xd2\x60\x7a\x95\xa2\x98\xe3\x41\xa4\x66\x05\xa6\xc1\x52\xe2\xaa\x24\xe3\x3a\xce\x2b\x29\x5c\x9e\x0a\x5c\x4a\x8e\xe1\x56\x78\x0c\x52\x4b\x27\x99\x0a\x2d\x67\x0a\xd3\x93\x06\xe8\x41\x18\xc2\x4d\x8e\xc0\x66\xb4\x44\x38\x83\x2d\xb0\x63\x73\x0b\x47\x45\x65\xdd\x11\x70\x2a\x10\x32\x69\xac\x03\xa9\xc1\xe5\x08\xbe\xb7\x73\x60\x7a\x0d\xe4\x72\x34\x5b\xb9\xc9\x0d\x3e\xa8\x8e\x39\x62\x99\x43\x73\xe4\x43\x2c\xd6\x90\x61\xb8\xcb\xea\xa4\x53\x38\x79\x5d\x49\x25\x40\xd1\xdc\x42\x46\x06\xde\xd0\x0c\xee\xee\x20\x7a\x4b\xf3\xe9\x25\x6c\x36\x49\x5c\xbb\xf5\xdb\x4a\x5f\x13\x39\xeb\x0c\x2b\x5b\x28\x25\xf5\x2d\xe4\x06\xb3\x34\x88\x63\x2e\xf4\xc2\x46\x5c\x51\x25\x32\xc5\x0c\x46\x9c\x8a\x98\x2d\xd8\xb7\x58\xc9\x99\x8d\xdd\x4a\x3a\x87\x26\x9c\x35\x30\xf1\x59\x74\x16\x3d\x8f\xb9\xb5\xf1\x5e\x17\x15\x52\x47\xdc\xda\x00\x0c\xaa\x34\xb0\x6e\xad\xd0\xe6\x88\x2e\x68\x2a\xe9\xa4\xf4\xc3\xb3\xe3\x38\xce\x48\x3b\x1b\xcd\x89\xe6\x0a\x59\x29\xed\x36\x31\xb7\xf6\xa7\x8c\x15\x52\xad\xd3\x6b\xaa\x0c\xc7\xe3\x0b\x12\x78\xfc\xc1\xd0\xfd\xd8\x5b\x55\xdd\x1a\x00\x29\xb8\x83\xdd\x3b\xc0\x8c\xf1\xdb\xb9\xa1\x4a\x8b\x90\x93\x22\x33\x86\x87\xd9\x4b\xff\x77\xbe\x77\xf1\x65\x84\x75\xca\x31\x0c\xea\xa4\xe0\x93\xc2\x07\x43\x83\xc7\x50\x90\x26\x5b\x32\x8e\x4d\xc8\x66\xf7\x54\x32\xb2\x4e\xa0\x31\x60\x4b\xa6\xe1\x6e\x8f\xb8\xcf\xf4\xe4\x49\x9b\x66\x95\x4b\x87\xe1\x16\x68\x0c\xa5\xc1\x70\x65\x58\x79\x08\x99\xc4\xbb\x4e\xda\xe1\xfd\x72\xf3\xeb\xdb\x67\x60\x73\x59\x00\xd3\x02\x3e\xa2\x2d\x49\x8b\x68\x51\x4f\x7f\x7a\xf5\x02\x6c\x55\xfa\x4d\x06\xca\x76\xce\xa8\xb0\x40\xed\xec\x36\xa0\x40\x21\x19\x7c\xad\xd0\x48\xec\xec\x92\x87\xfe\xf4\xea\xe3\xbb\xe9\xbb\x9f\xc7\x5d\x50\x41\x68\xf5\xc0\xc1\x8a\xcc\x2d\xc8\x0c\xd6\x54\x81\xbf\x2b\xdb\x1d\x2e\xd9\x1c\x61\x29\x19\x64\x52\xe1\x38\x8e\x0f\xe0\x3e\xcb\x0c\x94\x83\xe9\x15\xbc\xfc\xd2\x8c\x22\xb1\xdc\xc8\xd2\x81\x35\xbc\x9d\x3a\x59\x1b\x15\xec\x1b\x17\x7a\x3b\x6f\xcf\x03\xcf\x6c\x2e\x97\xf1\x59\xf4\x3c\x3a\x6d\xe5\xed\x4a\x2d\x6c\x30\x49\xe2\x1a\xe6\xbf\xa0\x9a\xba\xa5\xf8\x24\x7a\x1a\x9d\x36\xd2\x3d\x88\xc9\x83\xcf\xa8\x85\xcc\xbe\xd4\xed\x24\x71\xc3\x43\xc9\x8c\xc4\x7a\xd2\xef\xf5\x12\x21\x97\xc0\x15\xb3\x36\x0d\xfc\x9d\x65\x52\xa3\x09\xf6\xf5\x74\xac\x86\x56\x7b\xfd\xa1\x85\x93\x0a\x0b\x11\x9e\x9c\x76\xec\x00\x09\x29\x90\x22\x0d\xfc\x7d\xf6\x75\x91\xea\x44\xc7\x42\x2e\xf7\x49\x5a\x61\xf7\xda\x0e\x72\xf1\x5b\x85\x66\x0d\x43\x8d\x1c\xad\x65\x66\xbd\xdd\x8d\xfd\xb5\x1f\x58\x78\xc3\x96\xec\xba\x3e\xb5\x52\x55\x73\xa9\xed\xa8\x1d\x5e\xf7\x38\xff\x91\x0d\x16\x7e\x95\xd6\xf1\x49\x74\x72\x1a\x3d\xdd\x49\xf7\x9e\x6b\x18\xc2\x54\x73\x55\x09\x04\xa6\x94\x67\xb8\x52\x2a\x14\x4d\x0d\x30\x9c\xa1\xa2\xd5\xe8\x31\x90\x01\xb9\x73\x94\x5a\xc8\xa5\x14\x15\x53\xdb\x35\xb3\xc0\x2c\x68\x44\x81\xe2\x7f\x56\x7c\x1f\x7f\x2d\xbe\xa7\xaf\xc3\x0e\xba\x99\x9a\x21\x2c\x99\xf1\xcc\x3b\xbd\x84\x14\x82\x2e\xeb\x06\xe7\xfd\x7e\xaf\xd7\xf3\x76\xd4\xa2\x24\xa9\xdd\xb9\x57\x34\x02\xa4\x30\xcc\x2a\xcd\x9d\x24\x3d\x1c\xc1\x9d\xb7\xf5\xec\x4a\x3a\x9e\xc3\x50\x11\x67\xde\x10\x95\x86\x1c\x71\x52\x8d\x43\x8f\x33\x8b\xb0\x5b\xf1\x60\x5c\xeb\x7a\x06\x5d\x65\x34\x04\x2b\xeb\xf7\x3e\x80\x63\xd8\x03\xe4\x64\x1d\x1c\x43\x10\x2b\x9a\xc7\xd6\x19\x64\xc5\xce\x61\x3e\xbd\x3c\xaf\xe3\x05\x66\xac\x52\xee\xef\x68\xff\x02\xec\x3b\xac\x8d\xff\xbf\x19\x0d\x47\x5b\xd1\x12\xbf\x85\x14\x34\xae\xe0\x13\xce\xae\x89\xdf\xa2\x1b\x36\x07\xd0\xba\x44\xa4\x0b\xbf\xa5\x73\x84\x14\xf6\x67\x82\x4b\x37\x6a\xf9\xd3\x9f\xa3\x60\x8e\x41\x0a\x6f\xae\xdf\xbf\x8b\x4a\xff\x1d\xe0\x7d\x22\xaf\x1d\xb5\x9c\x2a\x33\x18\x7a\x55\xc4\x73\xa6\x35\x2a\x48\xd3\x14\x02\xff\x73\x1c\x8c\x3a\x7c\x0c\x50\xb7\xd9\x06\x6e\xfa\x07\xc9\x94\xd4\xbe\x9c\x47\xc3\x41\xa2\xe4\x24\xf1\x74\xee\x57\xa1\x7e\x28\x39\x19\x74\x72\x3e\x1a\x7a\xef\x51\x94\x49\x2d\x86\x03\xef\x33\x18\x45\x0e\xbf\xb9\xba\x92\x5d\x73\x3f\x08\x60\x42\x5c\x78\x2e\x38\xa8\xf8\x47\x7e\x65\x89\x5a\xdc\xd0\xf0\xd1\x70\xf0\xd0\x13\xc3\x60\xb4\xf7\xda\x9c\x37\x3f\x14\xfb\xc5\x4c\xe2\x9a\xa6\x92\xb8\xfe\xb2\xfa\x2b\x00\x00\xff\xff\xc9\xc7\x57\x33\x6a\x09\x00\x00")

func assetsLoginterfaceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsLoginterfaceHtml,
		"assets/loginterface.html",
	)
}

func assetsLoginterfaceHtml() (*asset, error) {
	bytes, err := assetsLoginterfaceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/loginterface.html", size: 2410, mode: os.FileMode(436), modTime: time.Unix(1474801379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.loginterface.html.swp": assetsLoginterfaceHtmlSwp,
	"assets/loginterface.html": assetsLoginterfaceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".loginterface.html.swp": &bintree{assetsLoginterfaceHtmlSwp, map[string]*bintree{}},
		"loginterface.html": &bintree{assetsLoginterfaceHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

