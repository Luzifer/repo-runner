// Code generated by go-bindata.
// sources:
// assets/loginterface.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsLoginterfaceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x6d\x6f\xdc\x36\x12\xfe\xee\x5f\x31\x61\x82\xdb\xdd\xc4\x92\xea\xa4\x45\x5b\x5b\xf2\xa1\x75\x82\xbb\x0d\x7a\x69\x2e\xf6\xa1\x77\x28\x8a\xc3\x2c\x39\x92\x68\x53\xa4\x4a\x52\xbb\x5e\x18\xfe\xef\x07\xea\x65\x57\xda\xd8\x49\xdb\x03\x8a\x20\x90\xc8\x7d\x38\x6f\xcf\x70\x66\xe4\xf4\xc9\xeb\x1f\x2f\xae\xfe\xf3\xfe\x0d\x94\xbe\x52\xe7\x47\x69\x78\x80\x42\x5d\x64\x8c\x34\x3b\x3f\x02\x48\x4b\x42\x11\x5e\x00\xd2\x8a\x3c\x02\x2f\xd1\x3a\xf2\x19\x6b\x7c\x1e\x7d\xc3\xc6\x3f\x95\xde\xd7\x11\xfd\xda\xc8\x75\xc6\xfe\x1d\xfd\xeb\xbb\xe8\xc2\x54\x35\x7a\xb9\x52\xc4\x80\x1b\xed\x49\xfb\x8c\x2d\xdf\x64\x24\x0a\x9a\x9c\xd4\x58\x51\xc6\xd6\x92\x36\xb5\xb1\x7e\x04\xde\x48\xe1\xcb\x4c\xd0\x5a\x72\x8a\xda\xc5\x31\x48\x2d\xbd\x44\x15\x39\x8e\x8a\xb2\x93\x41\xd0\x93\x28\x82\xab\x92\x00\x57\x66\x4d\xf0\x0a\x5a\xc1\x1e\x0b\x07\xcf\xab\xc6\xf9\xe7\xc0\x4d\x45\x90\x4b\xeb\x3c\x48\x0d\xbe\x24\x08\xbe\x9d\x01\xea\x2d\x18\x5f\x92\x6d\xd7\x83\x6e\x08\x87\xba\x33\xcf\x31\xf7\x64\x9f\x87\x23\x8e\x3a\x91\x51\xd4\x6b\xf5\xd2\x2b\x3a\xff\xbe\x91\x4a\x80\x32\x85\x83\xdc\x58\x78\x6b\x56\x70\x77\x07\xf1\x0f\xa6\x58\xbe\x86\xfb\xfb\x34\xe9\x60\x47\x7b\x4b\xbf\x37\xc6\x3b\x6f\xb1\xde\x8b\x52\x52\xdf\x40\x69\x29\xcf\x58\x92\x70\xa1\xaf\x5d\xcc\x95\x69\x44\xae\xd0\x52\xcc\x4d\x95\xe0\x35\xde\x26\x4a\xae\x5c\xe2\x37\xd2\x7b\xb2\xd1\x6a\x10\x93\xbc\x8a\x5f\xc5\x5f\x27\xdc\xb9\x64\xb7\x17\x57\x52\xc7\xdc\x39\x06\x96\x54\xc6\x9c\xdf\x2a\x72\x25\x91\x67\x83\x25\x23\x95\x81\x3c\x77\x9a\x24\xb9\xd1\xde\xc5\x85\x31\x85\x22\xac\xa5\x6b\x15\x73\xe7\xfe\x9a\x63\x25\xd5\x36\xbb\x34\x8d\xe5\xf4\xe2\xc2\x08\x7a\xf1\xde\x9a\xc7\x65\xb7\x5b\x9d\x6b\x00\x46\xc1\x1d\xf4\xef\x00\x2b\xe4\x37\x85\x35\x8d\x16\x11\x37\xca\xd8\x53\x78\x9a\x7f\x1b\xfe\x9d\xed\x20\xc1\x8c\xa8\x53\x79\x0a\xb3\x4e\x29\x04\xa5\xf0\xde\x9a\xd9\x31\x54\x46\x1b\x57\x23\xa7\xe1\xc8\x7d\xff\x54\x32\x76\x5e\x90\xb5\xe0\x6a\xd4\x70\xb7\x93\xb8\xd3\xf4\xc5\x17\x7b\x35\x9b\x52\x7a\x8a\x5a\x41\xa7\x50\x5b\x8a\x36\x16\xeb\xa9\xc8\x34\xe9\x3d\xd9\x93\xf7\xf7\xab\x7f\xfc\xf0\x15\xb8\x52\x56\x80\x5a\xc0\x07\x72\xb5\xd1\x22\xbe\xee\xd8\x5f\xbe\xf9\x06\x5c\x53\x87\x4c\x06\x93\xf7\x60\x52\x54\x91\xf6\xae\x3d\x50\x91\x90\x08\xbf\x36\x64\x25\x8d\x72\x29\x88\xfe\xe9\xbb\x0f\xef\x96\xef\xfe\x76\x3a\x16\x2a\x0c\x39\x3d\xf3\xb0\x31\xf6\x06\x64\x0e\x5b\xd3\x40\xb8\x2b\x6d\x0e\xd7\x58\x10\xac\x25\x42\x2e\x15\x9d\x26\xc9\x44\xdc\xcf\x32\x07\xe5\x61\xf9\x06\xbe\xfd\x65\xa0\x22\x75\xdc\xca\xda\x83\xb3\x7c\xcf\xba\x71\x2e\xae\xf0\x96\x0b\xdd\xf2\x1d\xea\xc0\x57\xae\x94\xeb\xe4\x55\xfc\x75\xfc\x72\xbf\x6e\x53\xea\xda\xb1\xf3\x34\xe9\xc4\xfc\x1e\xa9\xb6\x73\x29\x39\x89\xbf\x8c\x5f\x0e\xab\x47\x24\xa6\x4f\x7e\x26\x2d\x64\xfe\x4b\xe7\x4e\x9a\x0c\x75\x28\x5d\x19\xb1\xed\x31\x1a\xd7\xc0\x15\x3a\x97\x31\x8d\xeb\x15\x5a\xe8\x1e\x91\xa0\x1c\x1b\xe5\xd9\xce\x3a\x21\x77\xc8\x70\xbf\x51\x6a\xb2\x51\xae\x1a\x29\x76\x98\xe1\x62\xda\xc0\x50\xf8\xef\x4d\x51\x28\x82\x82\x3c\x84\x64\xad\x49\xb4\xf4\xae\x28\xdc\x3c\xa8\xcc\x4a\x2a\x02\x21\x5d\xad\x70\xbb\x8b\xfa\xa1\xb6\xde\xa0\x60\x3d\xd9\x91\xae\xe0\x48\xe3\xbd\xd1\xe0\xb7\x35\x65\xac\x5b\xb0\x83\x63\xbd\x09\xdc\x28\x85\xb5\x23\xc1\x40\xa0\xc7\x7e\x3b\xb8\xd2\xed\x0f\xdb\x68\x8b\x50\x99\x9f\xae\x5c\x44\xb7\x58\xd5\x8a\xa2\x5e\xd0\x80\x8c\x4e\x18\xa0\x95\x18\xd1\x6d\x8d\x5a\x90\xc8\x58\x8e\xca\xd1\xc4\xb2\xc0\x66\xb8\x3b\xbd\x2d\xce\x46\x46\xab\x2d\x3b\xbf\xea\xac\xd1\xb8\x96\x05\x7a\x69\x74\x9a\x04\xdc\x27\x8e\x4a\x6e\x74\xb4\x42\xdb\xb2\xfb\xa7\x40\xd3\xa4\x8b\xe4\x64\x0f\x0f\xc2\xba\x0a\x1c\xb3\xbe\xf0\x3d\x65\xe7\x1f\xa8\x36\xd1\x87\x46\x6b\xb2\x69\x82\x23\x22\x13\x21\xd7\xfd\xc5\xdf\x25\xc8\x85\x51\x8a\xb8\x6f\x2f\x5f\x48\xc0\x50\x43\xdd\x71\x48\x8d\xca\x1d\xb7\x89\xd3\x35\x93\xa1\x8f\x84\x9c\x69\x09\x93\xba\x78\x34\x4d\x06\x7e\xe0\x80\x2f\x06\x52\x64\xec\x93\x7c\x4e\x3c\x6d\xd4\xc8\xd5\x41\x98\xc6\xf5\x21\xbf\x4a\x4e\x37\x00\xd2\xfa\x30\xf7\xe8\xd6\xb3\x43\x14\x40\xd7\xea\x82\x53\x96\x6a\xe3\xa4\x37\x76\x1b\x22\x3c\x04\xf3\x40\x4a\x88\x4e\xe7\x44\x80\x77\xcb\xf3\x10\x64\xf8\x4b\x25\x85\x30\xfe\xec\x23\x0d\x97\x1e\x7d\xe3\x4e\x7b\xce\x5b\xff\x83\xce\xc8\xb5\xfb\xec\x7c\x83\xd2\x4b\x5d\xc4\x71\xfc\x50\xa6\x04\xd6\xea\x03\x6f\x93\xa9\xbb\x69\xd2\xa8\x43\x92\x5b\x6a\x93\xf8\x20\xbc\x23\xbe\x26\xb0\x83\x1a\xb2\xaf\xb9\x89\xc6\x21\x61\x1e\xac\x39\x0f\x56\x24\x6b\x36\xec\xd1\xb4\x88\x2a\x11\x9d\xbc\x9c\xb2\x6c\x54\x1b\x96\x30\x6f\x84\x60\x9a\x8f\xbc\x39\xfa\x68\x31\x4e\xe5\xd6\x89\xeb\x7f\x36\x64\xb7\x30\xd7\xc4\xc9\x39\xb4\xdb\x96\xd3\xdd\x58\x32\x73\xf0\x16\xd7\x78\xd9\x55\xf5\x5a\x35\x85\xd4\x6e\xb1\x77\x74\x5c\xee\x3f\x3b\xad\x5c\x87\x56\xb7\x4d\x4e\xe2\x93\x97\xf1\x97\xfd\xea\xd1\xba\x1f\x45\xb0\xd4\x5c\x35\x82\x00\x95\x0a\x13\x58\x2d\x15\x89\xc1\x06\x98\xaf\x48\x99\xcd\xe2\x18\x8c\x05\xd9\x03\xa5\x16\x72\x2d\x45\x83\xaa\x6d\x83\x0e\xd0\x81\x26\x12\x24\xfe\xa0\xc5\x8f\xcd\x57\xd7\x87\xe3\xd5\xd4\x83\xb1\xa6\x81\x84\x35\xda\x30\x19\x2e\x5f\x43\x06\x6c\x3c\x15\xb2\xb3\xa3\x11\x84\xb4\xa8\x8d\xd4\xbb\xfb\x30\xac\x21\x83\x79\xde\x68\x1e\xea\xed\x7c\x31\x9a\x67\xdc\x46\x7a\x5e\xc2\x5c\x19\xde\x16\xe3\xb8\xb6\xc6\x1b\x6e\xd4\x18\x04\xc0\xd1\x11\xf4\x1d\x99\x9d\x4e\xee\x85\x25\xdf\x58\x0d\x6c\xe3\x42\xb3\x66\xf0\x02\x76\xb2\x4a\xe3\x3c\xbc\x00\x96\x28\x53\x24\xce\x5b\xc2\xaa\x07\x14\xcb\xd7\xe3\x2b\xdb\x77\xda\xc7\x04\xff\x41\xb9\xc3\x30\x77\xbf\x98\x2f\x86\x5d\x67\xf8\x0d\x64\xa0\x69\x03\x3f\xd1\xea\xd2\xf0\x1b\xf2\xf3\x21\x4a\x13\x54\x6c\x74\x15\x72\xba\x20\xc8\x60\x17\x3b\x5a\xfb\xc5\x3e\x30\x21\xe4\xa1\x69\x42\x06\x6f\x2f\x7f\x7c\x17\xd7\xe1\xab\x26\x60\xe2\xb0\xbb\xd8\x9b\x22\x73\x98\x87\xad\x98\x97\xa8\x35\x29\xc8\xb2\x0c\x58\xf8\xb8\x60\xd3\x40\x77\x7c\x74\xd8\xd0\xd3\xa7\xbf\x0e\x44\x84\x83\xff\x6d\x4b\x61\x63\xd5\x01\x1f\x00\xcf\xe6\xb3\xa7\xbb\x3a\x39\x5b\xc4\xe8\xbd\x9d\xcf\x42\x69\x9d\x1d\xb7\xe6\xc6\xbd\x63\x8b\xc3\xb2\xb9\xb2\x84\x37\x67\x9f\x54\x18\x3e\xb2\x3e\xab\x31\x54\xfd\xf9\xff\xa1\xc9\x79\xb4\xfe\x41\x2d\xe3\x22\x3e\x28\x9a\xd9\x46\xeb\xae\x96\xcf\x7e\xa7\xa2\x5c\x6a\xe9\x4a\x12\xbf\x5d\xd7\x70\xe2\xb7\xa8\xba\x1f\xbd\x77\xd9\x3c\x4e\xce\x49\x16\x29\xa9\x43\x9e\x3d\x9b\xcf\x42\x57\x6d\x9b\xd6\x30\x97\xb4\x8d\x67\xac\xed\xd9\x3c\xa0\x17\x71\x2e\xb5\x98\xcf\x02\xe6\x33\x21\x1f\x0e\xa0\x10\x17\xa1\x25\x4c\x52\xf1\x21\x5c\x5d\x93\x16\x57\x66\x1e\xa2\x10\xfa\xc3\x6c\xb1\x43\xdd\x9f\x0d\xdf\x33\xbb\xfa\x94\x26\xdd\x34\x9d\x26\xdd\x1f\x00\xfe\x17\x00\x00\xff\xff\xe8\x71\xc6\x22\x11\x10\x00\x00")

func assetsLoginterfaceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsLoginterfaceHtml,
		"assets/loginterface.html",
	)
}

func assetsLoginterfaceHtml() (*asset, error) {
	bytes, err := assetsLoginterfaceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/loginterface.html", size: 4113, mode: os.FileMode(436), modTime: time.Unix(1481737855, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/loginterface.html": assetsLoginterfaceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"loginterface.html": &bintree{assetsLoginterfaceHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

