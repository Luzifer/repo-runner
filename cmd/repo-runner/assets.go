// Code generated by go-bindata.
// sources:
// assets/loginterface.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsLoginterfaceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x6d\x6f\xdc\x36\x12\xfe\x9e\x5f\x31\x61\x82\xdb\xdd\xc4\x92\xe2\xa4\x45\xda\xb5\xe4\x43\xeb\x04\x77\x0e\x7a\x69\x2e\xf6\xa1\x77\x28\x8a\xc3\xac\x38\x92\x68\x53\x24\x4b\x52\xbb\x5e\x18\xfe\xef\x07\xea\x65\x57\xda\xd8\x49\xdb\x03\x0a\xc3\x58\x91\x3b\x9c\xb7\xe7\xe1\xcc\x68\xd3\xc7\x6f\x7e\x3c\xbb\xfc\xcf\x87\xb7\x50\xf9\x5a\x9e\x3e\x4a\xc3\x07\x48\x54\x65\xc6\x48\xb1\xd3\x47\x00\x69\x45\xc8\xc3\x03\x40\x5a\x93\x47\xc8\x2b\xb4\x8e\x7c\xc6\x1a\x5f\x44\xdf\xb0\xf1\x57\x95\xf7\x26\xa2\x5f\x1b\xb1\xce\xd8\xbf\xa3\x7f\x7d\x17\x9d\xe9\xda\xa0\x17\x2b\x49\x0c\x72\xad\x3c\x29\x9f\xb1\xf3\xb7\x19\xf1\x92\x26\x27\x15\xd6\x94\xb1\xb5\xa0\x8d\xd1\xd6\x8f\x84\x37\x82\xfb\x2a\xe3\xb4\x16\x39\x45\xed\xe2\x08\x84\x12\x5e\xa0\x8c\x5c\x8e\x92\xb2\xe3\x41\xd1\xe3\x28\x82\xcb\x8a\x00\x57\x7a\x4d\xf0\x0a\x5a\xc5\x1e\x4b\x07\xcf\xea\xc6\xf9\x67\x90\xeb\x9a\xa0\x10\xd6\x79\x10\x0a\x7c\x45\x10\x62\x3b\x01\x54\x5b\xd0\xbe\x22\xdb\xae\x07\xdb\x10\x0e\x75\x67\x9e\x61\xe1\xc9\x3e\x0b\x47\x1c\x75\x2a\xa3\xa8\xb7\xea\x85\x97\x74\xfa\x7d\x23\x24\x07\xa9\x4b\x07\x85\xb6\xf0\x4e\xaf\xe0\xf6\x16\xe2\x1f\x74\x79\xfe\x06\xee\xee\xd2\xa4\x13\x7b\xb4\xf7\xf4\x7b\xad\xbd\xf3\x16\xcd\x5e\x95\x14\xea\x1a\x2a\x4b\x45\xc6\x92\x24\xe7\xea\xca\xc5\xb9\xd4\x0d\x2f\x24\x5a\x8a\x73\x5d\x27\x78\x85\x37\x89\x14\x2b\x97\xf8\x8d\xf0\x9e\x6c\xb4\x1a\xd4\x24\xaf\xe2\x57\xf1\xeb\x24\x77\x2e\xd9\xed\xc5\xb5\x50\x71\xee\x1c\x03\x4b\x32\x63\xce\x6f\x25\xb9\x8a\xc8\xb3\xc1\x93\x91\xc9\x00\x9e\x5b\x26\x49\xa1\x95\x77\x71\xa9\x75\x29\x09\x8d\x70\xad\xe1\xdc\xb9\xbf\x16\x58\x0b\xb9\xcd\x2e\x74\x63\x73\x7a\x7e\xa6\x39\x3d\xff\x60\xf5\xc3\xba\xdb\xad\x2e\x34\x80\x95\xe6\x5b\xb8\x05\x83\x9c\x0b\x55\x46\x5e\x9b\x25\xbc\x7e\x61\x6e\x4e\xe0\xae\x97\xd0\x12\x6e\xa1\x7f\x06\x58\x61\x7e\x5d\x5a\xdd\x28\x1e\xe5\x5a\x6a\xbb\x84\x27\xc5\xb7\xe1\xef\x64\x27\x12\x1c\x8d\x3a\xa7\x96\x30\xeb\xdc\x82\xe0\x16\x7c\xb0\x7a\x76\x04\xb5\x56\xda\x19\xcc\x69\x38\x32\x58\x92\x22\x76\x9e\x93\xb5\xe0\x0c\x2a\xb8\xdd\x69\xdc\x59\x7a\xf1\x62\x6f\x66\x53\x09\x4f\x51\xab\x68\x09\xc6\x52\xb4\xb1\x68\xa6\x2a\xd3\xa4\x8f\x75\x0f\xef\xdf\x2f\xff\xf1\xc3\xd7\xe0\x2a\x51\x03\x2a\x0e\x1f\xc9\x19\xad\x78\x7c\xd5\xf1\xe3\xfc\xed\x37\xe0\x1a\x13\xb8\x0e\xba\xe8\x85\x49\x52\x4d\xca\xbb\xf6\x40\x4d\x5c\x20\xfc\xda\x90\x15\x34\x62\x5b\x50\xfd\xd3\x77\x1f\xdf\x9f\xbf\xff\xdb\x72\xac\x94\x6b\x72\x6a\xe6\x61\xa3\xed\x35\x88\x02\xb6\xba\x81\x70\x9b\x5a\x96\x1b\x2c\x09\xd6\x02\xa1\x10\x92\x96\x49\x32\x51\xf7\xb3\x28\x40\x7a\x38\x7f\x0b\xdf\xfe\x32\x80\x95\xba\xdc\x0a\xe3\xc1\xd9\x7c\xcf\x0b\xed\x5c\x5c\xe3\x4d\xce\x55\xcb\x88\x50\x29\xbe\x76\x95\x58\x27\xaf\xe2\xd7\xf1\xcb\xfd\xba\x25\xdd\x95\x63\xa7\x69\xd2\xa9\xf9\x3d\x5a\x6d\x17\x52\x72\x1c\x7f\x15\xbf\x1c\x56\x0f\x68\x4c\x1f\xff\x4c\x8a\x8b\xe2\x97\x2e\x9c\x34\x19\x2a\x55\x1a\xc8\xd6\xcb\x28\x5c\x43\x2e\xd1\xb9\x8c\x29\x5c\xaf\xd0\x42\xf7\x11\x71\x2a\xb0\x91\x7e\x58\x16\xe2\x86\x78\xa0\x25\xdb\xb9\xcb\xc5\xee\x68\x28\x09\x28\x14\xd9\xa8\x90\x8d\xe0\x3b\x99\xe1\x2e\xdb\x00\x59\xf8\xf7\xba\x2c\x25\x41\x49\x1e\x02\x7b\x0d\xf1\x16\xef\x15\x85\xcb\x0a\xb5\x5e\x09\x49\xc0\x85\x33\x12\xb7\x3b\x18\x0e\xad\xf5\x2e\x85\x70\xc8\x8e\x6c\x85\xc8\x1a\xef\xb5\x02\xbf\x35\x94\xb1\x6e\xc1\x0e\x8e\xf5\x2e\xe4\x5a\x4a\x34\x8e\x38\x03\x8e\x1e\xfb\xed\x10\x4a\xb7\x3f\x6c\xa3\x2d\x43\x31\x7f\xb2\x72\x11\xdd\x60\x6d\x24\x45\xbd\xa2\x41\x32\x3a\x66\x80\x56\x60\x44\x37\x06\x15\x27\x9e\xb1\x02\xa5\xa3\x89\x67\x01\xde\x70\x99\x7a\x5f\x9c\x8d\xb4\x92\x5b\x76\x7a\xd9\x79\xa3\x70\x2d\x4a\xf4\x42\xab\x34\x09\x72\x9f\x39\x2a\x72\xad\xa2\x15\xda\x16\xee\x3f\x45\x34\x4d\xba\x4c\x4e\xf6\xf0\x20\xad\xab\x80\x31\xeb\x6b\xe5\x13\x76\xfa\x91\x8c\x8e\x3e\x36\x4a\x91\x4d\x13\x1c\x01\x99\x70\xb1\xee\x2b\xc1\x8e\x20\x67\x5a\x4a\xca\x7d\x7b\x1b\x03\x23\x43\xd9\x75\x47\x81\x1a\xb5\x3b\x6a\x89\xd3\xf5\x9f\xa1\xf5\x04\xce\xb4\x80\x09\x55\x3e\x48\x93\x01\x1f\x38\xc0\x8b\x81\xe0\x19\xfb\x2c\x9e\x93\x48\x1b\x39\x0a\x75\x50\xa6\x70\x7d\x88\xaf\x14\xd3\x0d\x80\xd4\x1c\x72\x8f\x6e\x3c\x3b\x94\x02\xe8\xba\x63\x08\xca\x92\xd1\x4e\x78\x6d\xb7\x21\xc3\x43\x32\x0f\xb4\x84\xec\x74\x41\x04\xf1\x6e\x79\x1a\x92\x0c\x7f\xa9\x05\xe7\xda\x9f\x7c\x62\xe1\xc2\xa3\x6f\xdc\xb2\xc7\xbc\x8d\x3f\xd8\x8c\x5c\xbb\xcf\x4e\x37\x28\xbc\x50\x65\x1c\xc7\xf7\x31\x25\xa0\x66\x0e\xa2\x4d\xa6\xe1\xa6\x49\x23\x0f\x41\x6e\xa1\x4d\xe2\x83\xf4\x8e\xf0\x9a\x88\x1d\xd4\x90\x7d\x11\x4e\x14\x0e\x84\xb9\xb7\xe6\xdc\x5b\x91\xac\xde\xb0\x07\x69\x11\xd5\x3c\x3a\x7e\x39\x45\x59\xcb\x36\x2d\x61\x44\x09\xc9\xd4\x9f\x44\xf3\xe8\x93\xc5\x98\xca\x6d\x10\x57\xff\x6c\xc8\x6e\x61\xae\x28\x27\xe7\xd0\x6e\x5b\x4c\x77\x93\xcc\xcc\xc1\x3b\x5c\xe3\x45\x57\xe6\x8d\x6c\x4a\xa1\xdc\x62\x1f\xe8\xb8\xfe\x7f\x71\xc0\xb9\x0a\xbd\x6f\x9b\x1c\xc7\xc7\x2f\xe3\xaf\xfa\xd5\x83\x8d\x20\x8a\xe0\x5c\xe5\xb2\xe1\x04\x28\x65\x18\xda\x8c\x90\xc4\x07\x1f\x60\xbe\x22\xa9\x37\x8b\x23\xd0\x16\x44\x2f\x28\x14\x17\x6b\xc1\x1b\x94\x6d\x5f\x74\x80\x0e\x14\x11\x27\xfe\x07\x3d\x7e\x68\x24\xbb\x3a\x9c\xc8\xa6\x11\x8c\x2d\x0d\x20\xac\xd1\x86\x61\xf2\xfc\x0d\x64\xc0\xc6\x83\x24\x3b\x79\x34\x12\x21\xc5\x8d\x16\x6a\x77\x1f\x86\x35\x64\x30\x2f\x1a\x95\x87\x7a\x3b\x5f\x8c\x06\x1c\xb7\x11\x3e\xaf\x60\x2e\x75\xde\x16\xe3\xd8\x58\xed\x75\xae\xe5\x58\x08\x20\x47\x47\xd0\xb7\x68\xb6\x9c\xdc\x0b\x4b\xbe\xb1\x0a\xd8\xc6\x85\xee\xcd\xe0\x39\xec\x74\x55\xda\x79\x78\x0e\x2c\x91\xba\x4c\x9c\xb7\x84\x75\x2f\x50\x9e\xbf\x19\x5f\xd9\xbe\xf5\x3e\xa4\xf8\x0f\xea\x1d\xa6\xbb\xbb\xc5\x7c\x31\xec\x3a\x9d\x5f\x43\x06\x8a\x36\xf0\x13\xad\x2e\x74\x7e\x4d\x7e\x3e\x64\x69\x22\x15\x6b\x55\x07\x4e\x97\x04\x19\xec\x72\x47\x6b\xbf\xd8\x27\x26\xa4\x3c\x34\x4d\xc8\xe0\xdd\xc5\x8f\xef\x63\x13\x5e\x84\x82\x4c\x1c\x76\x17\x7b\x57\x44\x01\xf3\xb0\x15\xe7\x15\x2a\x45\x12\xb2\x2c\x03\x16\xde\x47\xd8\x34\xd1\x1d\x1e\x9d\x6c\xe8\xe9\xd3\x6f\x07\x20\xc2\xc1\xff\xb6\xa5\xb0\xb1\xf2\x00\x0f\x80\xa7\xf3\xd9\x93\x5d\x9d\x9c\x2d\x62\xf4\xde\xce\x67\xa1\xb4\xce\x8e\x5a\x77\xe3\x3e\xb0\xc5\x61\xd9\x5c\x59\xc2\xeb\x93\xcf\x1a\x0c\xef\x65\x5f\xb4\x18\xaa\xfe\xfc\xff\xb0\xe4\x3c\x5a\x7f\xaf\x95\x71\x11\x1f\x0c\xcd\x6c\xa3\x54\x57\xcb\x67\xbf\xd3\x50\x21\x94\x70\x15\xf1\xdf\x6e\x6b\x38\xf1\x5b\x4c\xdd\x8d\x9e\x3b\x36\x8f\xc9\x39\x61\x91\x14\x2a\xf0\xec\xe9\x7c\x16\xba\x6a\xdb\xb4\x86\xb9\xa4\x6d\x3c\x63\x6b\x4f\xe7\x41\x7a\x11\x17\x42\xf1\xf9\x2c\xc8\x7c\x21\xe5\xc3\x01\xe4\xfc\x2c\xb4\x84\x09\x15\xef\x93\x33\x86\x14\xbf\xd4\xf3\x90\x85\xd0\x1f\x66\x8b\x9d\xd4\xdd\xc9\xf0\x82\xb3\xab\x4f\x69\xd2\x8d\xd7\x69\xd2\xfd\x66\xf0\xbf\x00\x00\x00\xff\xff\xee\x07\xa2\xad\x44\x10\x00\x00")

func assetsLoginterfaceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsLoginterfaceHtml,
		"assets/loginterface.html",
	)
}

func assetsLoginterfaceHtml() (*asset, error) {
	bytes, err := assetsLoginterfaceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/loginterface.html", size: 4164, mode: os.FileMode(436), modTime: time.Unix(1481739036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/loginterface.html": assetsLoginterfaceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"loginterface.html": &bintree{assetsLoginterfaceHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

