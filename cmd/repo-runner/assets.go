// Code generated by go-bindata.
// sources:
// assets/loginterface.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsLoginterfaceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\x6d\x6f\x1b\x37\x12\xfe\xee\x5f\x31\x61\x82\x93\x94\x78\x77\xeb\xa4\x45\x5b\x7b\xd7\x87\xd6\x09\xee\x1c\xf4\xd2\x5c\xec\x43\xef\x50\x14\x87\x11\x39\xbb\x4b\x9b\x4b\x6e\x49\xae\x64\xc1\xf0\x7f\x3f\x70\x5f\xa4\x5d\xc5\x4a\x7a\xf9\x50\x18\x86\x44\x6a\xf8\xcc\xcb\x33\x9c\x19\xa6\x4f\x5e\xff\x7c\x71\xfd\x9f\xf7\x6f\xa0\xf4\x95\x3a\x3f\x4a\xc3\x07\x28\xd4\x45\xc6\x48\xb3\xf3\x23\x80\xb4\x24\x14\xe1\x0b\x40\x5a\x91\x47\xe0\x25\x5a\x47\x3e\x63\x8d\xcf\xa3\xef\xd8\xf8\xa7\xd2\xfb\x3a\xa2\xdf\x1b\xb9\xca\xd8\xbf\xa3\x7f\xfd\x10\x5d\x98\xaa\x46\x2f\x97\x8a\x18\x70\xa3\x3d\x69\x9f\xb1\xcb\x37\x19\x89\x82\x26\x27\x35\x56\x94\xb1\x95\xa4\x75\x6d\xac\x1f\x09\xaf\xa5\xf0\x65\x26\x68\x25\x39\x45\xed\xe2\x18\xa4\x96\x5e\xa2\x8a\x1c\x47\x45\xd9\xc9\x00\xf4\x24\x8a\xe0\xba\x24\xc0\xa5\x59\x11\xbc\x82\x16\xd8\x63\xe1\xe0\x79\xd5\x38\xff\x1c\xb8\xa9\x08\x72\x69\x9d\x07\xa9\xc1\x97\x04\xc1\xb7\x33\x40\xbd\x01\xe3\x4b\xb2\xed\x7a\xd0\x0d\xe1\x50\x77\xe6\x39\xe6\x9e\xec\xf3\x70\xc4\x51\x07\x19\x45\xbd\x56\x2f\xbd\xa2\xf3\x1f\x1b\xa9\x04\x28\x53\x38\xc8\x8d\x85\xb7\x66\x09\xf7\xf7\x10\xff\x64\x8a\xcb\xd7\xf0\xf0\x90\x26\x9d\xd8\xd1\xce\xd2\x1f\x8d\xf1\xce\x5b\xac\x77\x50\x4a\xea\x5b\x28\x2d\xe5\x19\x4b\x12\x2e\xf4\x8d\x8b\xb9\x32\x8d\xc8\x15\x5a\x8a\xb9\xa9\x12\xbc\xc1\xbb\x44\xc9\xa5\x4b\xfc\x5a\x7a\x4f\x36\x5a\x0e\x30\xc9\xab\xf8\x55\xfc\x6d\xc2\x9d\x4b\xb6\x7b\x71\x25\x75\xcc\x9d\x63\x60\x49\x65\xcc\xf9\x8d\x22\x57\x12\x79\x36\x58\x32\x52\x19\xc8\x73\xa7\x49\x92\x1b\xed\x5d\x5c\x18\x53\x28\xc2\x5a\xba\x56\x31\x77\xee\xaf\x39\x56\x52\x6d\xb2\x2b\xd3\x58\x4e\x2f\x2e\x8c\xa0\x17\xef\xad\x39\x8c\xdd\x6e\x75\xae\x01\x18\x05\xf7\xd0\x7f\x07\x58\x22\xbf\x2d\xac\x69\xb4\x88\xb8\x51\xc6\x9e\xc2\xd3\xfc\xfb\xf0\x77\xb6\x15\x09\x66\x44\x9d\xca\x53\x98\x75\x4a\x21\x28\x85\xf7\xd6\xcc\x8e\xa1\x32\xda\xb8\x1a\x39\x0d\x47\x1e\xfa\x4f\x25\x63\xe7\x05\x59\x0b\xae\x46\x0d\xf7\x5b\xc4\xad\xa6\xaf\xbe\xda\xa9\x59\x97\xd2\x53\xd4\x02\x9d\x42\x6d\x29\x5a\x5b\xac\xa7\x90\x69\xd2\x7b\xb2\x23\xef\xef\xd7\xff\xf8\xe9\x1b\x70\xa5\xac\x00\xb5\x80\x0f\xe4\x6a\xa3\x45\x7c\xd3\xb1\x7f\xf9\xe6\x3b\x70\x4d\x1d\x32\x19\x4c\xde\x0b\x93\xa2\x8a\xb4\x77\xed\x81\x8a\x84\x44\xf8\xbd\x21\x2b\x69\x94\x4b\x01\xfa\x97\x1f\x3e\xbc\xbb\x7c\xf7\xb7\xd3\x31\xa8\x30\xe4\xf4\xcc\xc3\xda\xd8\x5b\x90\x39\x6c\x4c\x03\xe1\xae\xb4\x39\x5c\x63\x41\xb0\x92\x08\xb9\x54\x74\x9a\x24\x13\xb8\x5f\x65\x0e\xca\xc3\xe5\x1b\xf8\xfe\xb7\x81\x8a\xd4\x71\x2b\x6b\x0f\xce\xf2\x1d\xeb\xc6\xb9\xb8\xc2\x3b\x2e\x74\xcb\x77\xa8\x03\xdf\xb8\x52\xae\x92\x57\xf1\xb7\xf1\xcb\xdd\xba\x4d\xa9\x1b\xc7\xce\xd3\xa4\x83\xf9\x7f\x50\x6d\xe7\x52\x72\x12\x7f\x1d\xbf\x1c\x56\x07\x10\xd3\x27\xbf\x92\x16\x32\xff\xad\x73\x27\x4d\x86\x3a\x94\x2e\x8d\xd8\xf4\x32\x1a\x57\xc0\x15\x3a\x97\x31\x8d\xab\x25\x5a\xe8\x3e\x22\x41\x39\x36\xca\xb3\xad\x75\x42\x6e\x25\xc3\xfd\x46\xa9\xc9\x46\xb9\x6a\xa4\xd8\xca\x0c\x17\xd3\x06\x86\xc2\xbf\x37\x45\xa1\x08\x0a\xf2\x10\x92\xb5\x26\xd1\xd2\xbb\xa4\x70\xf3\xa0\x32\x4b\xa9\x08\x84\x74\xb5\xc2\xcd\x36\xea\xfb\xda\x7a\x83\x82\xf5\x64\x47\xba\x82\x23\x8d\xf7\x46\x83\xdf\xd4\x94\xb1\x6e\xc1\xf6\x8e\xf5\x26\x70\xa3\x14\xd6\x8e\x04\x03\x81\x1e\xfb\xed\xe0\x4a\xb7\x3f\x6c\xa3\x2d\x42\x65\x7e\xba\x74\x11\xdd\x61\x55\x2b\x8a\x7a\xa0\x41\x32\x3a\x61\x80\x56\x62\x44\x77\x35\x6a\x41\x22\x63\x39\x2a\x47\x13\xcb\x02\x9b\xe1\xee\xf4\xb6\x38\x1b\x19\xad\x36\xec\xfc\xba\xb3\x46\xe3\x4a\x16\xe8\xa5\xd1\x69\x12\xe4\x3e\x71\x54\x72\xa3\xa3\x25\xda\x96\xdd\x3f\x45\x34\x4d\xba\x48\x4e\xf6\x70\x2f\xac\xcb\xc0\x31\xeb\x0b\xdf\x53\x76\xfe\x81\x6a\x13\x7d\x68\xb4\x26\x9b\x26\x38\x22\x32\x11\x72\xd5\x5f\xfc\x6d\x82\x5c\x18\xa5\x88\xfb\xf6\xf2\x85\x04\x0c\x35\xd4\x1d\x87\xd4\xa8\xdc\x71\x9b\x38\x5d\x33\x19\xfa\x48\xc8\x99\x96\x30\xa9\x8b\x83\x69\x32\xf0\x03\x7b\x7c\x31\x90\x22\x63\x9f\xe4\x73\xe2\x69\xa3\x46\xae\x0e\x60\x1a\x57\xfb\xfc\x2a\x39\xdd\x00\x48\xeb\xfd\xdc\xa3\x3b\xcf\xf6\xa5\x00\xba\x56\x17\x9c\xb2\x54\x1b\x27\xbd\xb1\x9b\x10\xe1\x21\x98\x7b\x28\x21\x3a\x9d\x13\x41\xbc\x5b\x9e\x87\x20\xc3\x5f\x2a\x29\x84\xf1\x67\x1f\x69\xb8\xf2\xe8\x1b\x77\xda\x73\xde\xfa\x1f\x74\x46\xae\xdd\x67\xe7\x6b\x94\x5e\xea\x22\x8e\xe3\xc7\x32\x25\xb0\x56\xef\x79\x9b\x4c\xdd\x4d\x93\x46\xed\x93\xdc\x52\x9b\xc4\x7b\xe1\x1d\xf1\x35\x11\xdb\xab\x21\xbb\x9a\x9b\x68\x1c\x12\xe6\xd1\x9a\xf3\x68\x45\xb2\x66\xcd\x0e\xa6\x45\x54\x89\xe8\xe4\xe5\x94\x65\xa3\xda\xb0\x84\x79\x23\x04\xd3\x7c\xe4\xcd\xd1\x47\x8b\x71\x2a\xb7\x4e\xdc\xfc\xb3\x21\xbb\x81\xb9\x26\x4e\xce\xa1\xdd\xb4\x9c\x6e\xc7\x92\x99\x83\xb7\xb8\xc2\xab\xae\xaa\xd7\xaa\x29\xa4\x76\x8b\x9d\xa3\xe3\x72\xff\xd9\x69\xe5\x26\xb4\xba\x4d\x72\x12\x9f\xbc\x8c\xbf\xee\x57\x07\xeb\x7e\x14\xc1\xa5\xe6\xaa\x11\x04\xa8\x54\x98\xc0\x6a\xa9\x48\x0c\x36\xc0\x7c\x49\xca\xac\x17\xc7\x60\x2c\xc8\x5e\x50\x6a\x21\x57\x52\x34\xa8\xda\x36\xe8\x00\x1d\x68\x22\x41\xe2\x0b\x2d\x3e\x34\x5f\xdd\xec\x8f\x57\x53\x0f\xc6\x9a\x06\x12\x56\x68\xc3\x64\x78\xf9\x1a\x32\x60\xe3\xa9\x90\x9d\x1d\x8d\x44\x48\x8b\xda\x48\xbd\xbd\x0f\xc3\x1a\x32\x98\xe7\x8d\xe6\xa1\xde\xce\x17\xa3\x79\xc6\xad\xa5\xe7\x25\xcc\x95\xe1\x6d\x31\x8e\x6b\x6b\xbc\xe1\x46\x8d\x85\x00\x38\x3a\x82\xbe\x23\xb3\xd3\xc9\xbd\xb0\xe4\x1b\xab\x81\xad\x5d\x68\xd6\x0c\x5e\xc0\x16\xab\x34\xce\xc3\x0b\x60\x89\x32\x45\xe2\xbc\x25\xac\x7a\x81\xe2\xf2\xf5\xf8\xca\xf6\x9d\xf6\x10\xf0\x17\xe2\x0e\xc3\xdc\xc3\x62\xbe\x18\x76\x9d\xe1\xb7\x90\x81\xa6\x35\xfc\x42\xcb\x2b\xc3\x6f\xc9\xcf\x87\x28\x4d\xa4\x62\xa3\xab\x90\xd3\x05\x41\x06\xdb\xd8\xd1\xca\x2f\x76\x81\x09\x21\x0f\x4d\x13\x32\x78\x7b\xf5\xf3\xbb\xb8\x0e\xaf\x9a\x20\x13\x87\xdd\xc5\xce\x14\x99\xc3\x3c\x6c\xc5\xbc\x44\xad\x49\x41\x96\x65\xc0\xc2\xe3\x82\x4d\x03\xdd\xf1\xd1\xc9\x86\x9e\x3e\xfd\x75\x20\x22\x1c\xfc\x6f\x5b\x0a\x1b\xab\xf6\xf8\x00\x78\x36\x9f\x3d\xdd\xd6\xc9\xd9\x22\x46\xef\xed\x7c\x16\x4a\xeb\xec\xb8\x35\x37\xee\x1d\x5b\x9c\x7d\x12\x3b\xbc\xa7\x3e\x0b\x1e\x0a\xfc\xfc\x8f\x81\x3a\x8f\xd6\x3f\x0a\x38\x2e\xcd\x03\xe6\xcc\x36\x5a\x77\x15\x7a\x76\x18\x33\x97\x5a\xba\x92\xc4\x1f\x87\x1d\x4e\xec\xa1\x3e\x1c\xed\x67\xde\x38\x91\x26\x8c\x2b\xa9\x43\x4e\x3c\x9b\xcf\x42\x07\x6c\x1b\xcc\x30\x43\xb4\x4d\x62\x0c\xfc\x6c\x1e\xa4\x17\x71\x2e\xb5\x98\xcf\x82\xcc\x67\x62\x36\x1c\x40\x21\x2e\x42\xf9\x9e\xa4\xcd\x63\x72\x75\x4d\x5a\x5c\x9b\x79\x70\x38\xd4\xf2\xd9\x62\x2b\xf5\x70\x36\xbc\x3d\xb6\xb5\x24\x4d\xba\xc9\x37\x4d\xba\xc7\xfa\xff\x02\x00\x00\xff\xff\x33\x7c\x2d\xec\xbd\x0f\x00\x00")

func assetsLoginterfaceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsLoginterfaceHtml,
		"assets/loginterface.html",
	)
}

func assetsLoginterfaceHtml() (*asset, error) {
	bytes, err := assetsLoginterfaceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/loginterface.html", size: 4029, mode: os.FileMode(436), modTime: time.Unix(1481735368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/loginterface.html": assetsLoginterfaceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"loginterface.html": &bintree{assetsLoginterfaceHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

