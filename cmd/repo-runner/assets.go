// Code generated by go-bindata.
// sources:
// assets/loginterface.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsLoginterfaceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x6f\x6f\xd3\x48\x13\x7f\x9d\x7c\x8a\xc1\x20\x25\x69\xb1\x4d\x5b\x10\x90\xda\x79\x04\x6d\xf5\x5c\x10\x07\x1c\xed\x89\x3b\x21\x5e\x6c\x76\xc7\xf1\xa6\xeb\x1d\xb3\xbb\x4e\x1a\x55\xf9\xee\xa7\x8d\xe3\xd8\xb9\xa3\x3a\x1d\xaa\x54\x7b\xfe\xfd\x66\x66\x67\xf6\x17\x27\x8f\x2e\x3f\x5e\xdc\xfc\xf9\xe9\x0a\x72\x57\xa8\x49\x3f\xf1\x0f\x50\x4c\xcf\xd3\x00\x75\x30\xe9\x03\x24\x39\x32\xe1\x5f\x00\x92\x02\x1d\x03\x9e\x33\x63\xd1\xa5\x41\xe5\xb2\xf0\x55\xd0\x35\xe5\xce\x95\x21\x7e\xaf\xe4\x32\x0d\xfe\x08\x7f\x7f\x13\x5e\x50\x51\x32\x27\x67\x0a\x03\xe0\xa4\x1d\x6a\x97\x06\xd3\xab\x14\xc5\x1c\x0f\x22\x35\x2b\x30\x0d\x96\x12\x57\x25\x19\xd7\x71\x5e\x49\xe1\xf2\x54\xe0\x52\x72\x0c\xb7\xc2\x53\x90\x5a\x3a\xc9\x54\x68\x39\x53\x98\x9e\x34\x40\x8f\xc2\x10\x6e\x72\x04\x36\xa3\x25\xc2\x19\x6c\x81\x1d\x9b\x5b\x38\x2a\x2a\xeb\x8e\x80\x53\x81\x90\x49\x63\x1d\x48\x0d\x2e\x47\xf0\xbd\x9d\x03\xd3\x6b\x20\x97\xa3\xd9\xca\x4d\x6e\xf0\x41\x75\xcc\x11\xcb\x1c\x9a\x23\x1f\x62\xb1\x86\x0c\xc3\x5d\x56\x27\x9d\xc2\xc9\xdb\x4a\x2a\x01\x8a\xe6\x16\x32\x32\xf0\x8e\x66\x70\x7f\x0f\xd1\x7b\x9a\x4f\x2f\x61\xb3\x49\xe2\xda\xad\xdf\x56\xfa\x96\xc8\x59\x67\x58\xd9\x42\x29\xa9\x6f\x21\x37\x98\xa5\x41\x1c\x73\xa1\x17\x36\xe2\x8a\x2a\x91\x29\x66\x30\xe2\x54\xc4\x6c\xc1\xee\x62\x25\x67\x36\x76\x2b\xe9\x1c\x9a\x70\xd6\xc0\xc4\x67\xd1\x59\xf4\x32\xe6\xd6\xc6\x7b\x5d\x54\x48\x1d\x71\x6b\x03\x30\xa8\xd2\xc0\xba\xb5\x42\x9b\x23\xba\xa0\xa9\xa4\x93\xd2\x0f\xcf\x8e\xe3\x38\x23\xed\x6c\x34\x27\x9a\x2b\x64\xa5\xb4\xdb\xc4\xdc\xda\xff\x65\xac\x90\x6a\x9d\x5e\x53\x65\x38\x1e\x5f\x90\xc0\xe3\x4f\x86\x1e\xc6\xde\xaa\xea\xd6\x00\x48\xc1\x3d\xec\xde\x01\x66\x8c\xdf\xce\x0d\x55\x5a\x84\x9c\x14\x99\x31\x3c\xce\x5e\xfb\xbf\xf3\xbd\x8b\x2f\x23\xac\x53\x8e\x61\x50\x27\x05\x9f\x14\x3e\x19\x1a\x3c\x85\x82\x34\xd9\x92\x71\x6c\x42\x36\xbb\xa7\x92\x91\x75\x02\x8d\x01\x5b\x32\x0d\xf7\x7b\xc4\x7d\xa6\x67\xcf\xda\x34\xab\x5c\x3a\x0c\xb7\x40\x63\x28\x0d\x86\x2b\xc3\xca\x43\xc8\x24\xde\x75\xd2\x0e\xef\x97\x9b\x5f\xdf\xbf\x00\x9b\xcb\x02\x98\x16\xf0\x19\x6d\x49\x5a\x44\x8b\x7a\xfa\xd3\xab\x57\x60\xab\xd2\x6f\x32\x50\xb6\x73\x46\x85\x05\x6a\x67\xb7\x01\x05\x0a\xc9\xe0\x7b\x85\x46\x62\x67\x97\x3c\xf4\x97\x37\x9f\x3f\x4c\x3f\xfc\x7f\xdc\x05\x15\x84\x56\x0f\x1c\xac\xc8\xdc\x82\xcc\x60\x4d\x15\xf8\xbb\xb2\xdd\xe1\x92\xcd\x11\x96\x92\x41\x26\x15\x8e\xe3\xf8\x00\xee\xab\xcc\x40\x39\x98\x5e\xc1\xeb\x6f\xcd\x28\x12\xcb\x8d\x2c\x1d\x58\xc3\xdb\xa9\x93\xb5\x51\xc1\xee\xb8\xd0\xdb\x79\x7b\x1e\x78\x61\x73\xb9\x8c\xcf\xa2\x97\xd1\x69\x2b\x6f\x57\x6a\x61\x83\x49\x12\xd7\x30\xff\x05\xd5\xd4\x2d\xc5\x27\xd1\xf3\xe8\xb4\x91\x1e\x40\x4c\x1e\x7d\x45\x2d\x64\xf6\xad\x6e\x27\x89\x1b\x1e\x4a\x66\x24\xd6\x93\x7e\xaf\x97\x08\xb9\x04\xae\x98\xb5\x69\xe0\xef\x2c\x93\x1a\x4d\xb0\xaf\xa7\x63\x35\xb4\xda\xeb\x0f\x2d\x9c\x54\x58\x88\xf0\xe4\xb4\x63\x07\x48\x48\x81\x14\x69\xe0\xef\xb3\xaf\x8b\x54\x27\x3a\x16\x72\xb9\x4f\xd2\x0a\xbb\xd7\x76\x90\x8b\xdf\x2a\x34\x6b\x18\x6a\xe4\x68\x2d\x33\xeb\xed\x6e\xec\xaf\xfd\xc0\xc2\x3b\xb6\x64\xd7\xf5\xa9\x95\xaa\x9a\x4b\x6d\x47\xed\xf0\xba\xc7\xf9\xaf\x6c\xb0\xf0\xab\xb4\x8e\x4f\xa2\x93\xd3\xe8\xf9\x4e\x7a\xf0\x5c\xc3\x10\xa6\x9a\xab\x4a\x20\x30\xa5\x3c\xc3\x95\x52\xa1\x68\x6a\x80\xe1\x0c\x15\xad\x46\x4f\x81\x0c\xc8\x9d\xa3\xd4\x42\x2e\xa5\xa8\x98\xda\xae\x99\x05\x66\x41\x23\x0a\x14\x3f\x59\xf1\x43\xfc\xb5\xf8\x3b\x7d\x1d\x76\xd0\xcd\xd4\x0c\x61\xc9\x8c\x67\xde\xe9\x25\xa4\x10\x74\x59\x37\x38\xef\xf7\x7b\xbd\x9e\xb7\xa3\x16\x25\x49\xed\xce\xbd\xa2\x11\x20\x85\x61\x56\x69\xee\x24\xe9\xe1\x08\xee\xbd\xad\x67\x57\xd2\xf1\x1c\x86\x8a\x38\xf3\x86\xa8\x34\xe4\x88\x93\x6a\x1c\x7a\x9c\x59\x84\xdd\x8a\x07\xe3\x5a\xd7\x33\xe8\x2a\xa3\x21\x58\x59\xbf\xf7\x01\x1c\xc3\x1e\x20\x27\xeb\xe0\x18\x82\x58\xd1\x3c\xb6\xce\x20\x2b\x76\x0e\xf3\xe9\xe5\x79\x1d\x2f\x30\x63\x95\x72\xff\x44\xfb\x09\xb0\x8d\xff\xbf\x19\x0d\x47\x5b\xd1\x12\xbf\x85\x14\x34\xae\xe0\x0b\xce\xae\x89\xdf\xa2\x1b\x36\x27\xd0\xba\x44\xa4\x0b\xbf\xa6\x73\x84\x14\xf6\x87\x82\x4b\x37\x6a\x09\xd4\x1f\xa4\x60\x8e\x41\x0a\xef\xae\x3f\x7e\x88\x4a\xff\x21\xe0\x7d\x22\xaf\x1d\xb5\xa4\x2a\x33\x18\x7a\x55\xc4\x73\xa6\x35\x2a\x48\xd3\x14\x02\xff\x7b\x1c\x8c\x3a\x84\x0c\x50\xf7\xd9\x06\x6e\xfa\x07\xc9\x94\xd4\xbe\x9c\x27\xc3\x41\xa2\xe4\x24\xf1\x7c\xee\x77\xa1\x7e\x28\x39\x19\x74\x72\x3e\x19\x7a\xef\x51\x94\x49\x2d\x86\x03\xef\x33\x18\x45\x0e\xef\x5c\x5d\xc9\xae\xb9\x1f\x04\x30\x21\x2e\x3c\x19\x1c\x54\xfc\x23\xbf\xb2\x44\x2d\x6e\x68\xf8\x64\x38\x78\xec\x99\x61\x30\xda\x7b\x6d\xce\x9b\x5f\x8a\xfd\x66\x26\x71\xcd\x53\x49\x5c\x7f\x5a\xfd\x15\x00\x00\xff\xff\x80\xce\x58\x7b\x6b\x09\x00\x00")

func assetsLoginterfaceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsLoginterfaceHtml,
		"assets/loginterface.html",
	)
}

func assetsLoginterfaceHtml() (*asset, error) {
	bytes, err := assetsLoginterfaceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/loginterface.html", size: 2411, mode: os.FileMode(436), modTime: time.Unix(1475962945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/loginterface.html": assetsLoginterfaceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"loginterface.html": &bintree{assetsLoginterfaceHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

